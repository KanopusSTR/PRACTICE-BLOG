// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package minimock

//go:generate minimock -i server/internal/repo.UserI -o mock_user.go -n UserMock -p minimock

import (
	"server/internal/entities"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UserMock implements repo.UserI
type UserMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddUser          func(user entities.User) (err error)
	inspectFuncAddUser   func(user entities.User)
	afterAddUserCounter  uint64
	beforeAddUserCounter uint64
	AddUserMock          mUserMockAddUser

	funcGetUser          func(mail string) (up1 *entities.User, err error)
	inspectFuncGetUser   func(mail string)
	afterGetUserCounter  uint64
	beforeGetUserCounter uint64
	GetUserMock          mUserMockGetUser
}

// NewUserMock returns a mock for repo.UserI
func NewUserMock(t minimock.Tester) *UserMock {
	m := &UserMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddUserMock = mUserMockAddUser{mock: m}
	m.AddUserMock.callArgs = []*UserMockAddUserParams{}

	m.GetUserMock = mUserMockGetUser{mock: m}
	m.GetUserMock.callArgs = []*UserMockGetUserParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserMockAddUser struct {
	optional           bool
	mock               *UserMock
	defaultExpectation *UserMockAddUserExpectation
	expectations       []*UserMockAddUserExpectation

	callArgs []*UserMockAddUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserMockAddUserExpectation specifies expectation struct of the UserI.Add
type UserMockAddUserExpectation struct {
	mock      *UserMock
	params    *UserMockAddUserParams
	paramPtrs *UserMockAddUserParamPtrs
	results   *UserMockAddUserResults
	Counter   uint64
}

// UserMockAddUserParams contains parameters of the UserI.Add
type UserMockAddUserParams struct {
	user entities.User
}

// UserMockAddUserParamPtrs contains pointers to parameters of the UserI.Add
type UserMockAddUserParamPtrs struct {
	user *entities.User
}

// UserMockAddUserResults contains results of the UserI.Add
type UserMockAddUserResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddUser *mUserMockAddUser) Optional() *mUserMockAddUser {
	mmAddUser.optional = true
	return mmAddUser
}

// Expect sets up expected params for UserI.Add
func (mmAddUser *mUserMockAddUser) Expect(user entities.User) *mUserMockAddUser {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserMock.Add mock is already set by Set")
	}

	if mmAddUser.defaultExpectation == nil {
		mmAddUser.defaultExpectation = &UserMockAddUserExpectation{}
	}

	if mmAddUser.defaultExpectation.paramPtrs != nil {
		mmAddUser.mock.t.Fatalf("UserMock.Add mock is already set by ExpectParams functions")
	}

	mmAddUser.defaultExpectation.params = &UserMockAddUserParams{user}
	for _, e := range mmAddUser.expectations {
		if minimock.Equal(e.params, mmAddUser.defaultExpectation.params) {
			mmAddUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddUser.defaultExpectation.params)
		}
	}

	return mmAddUser
}

// ExpectUserParam1 sets up expected param user for UserI.Add
func (mmAddUser *mUserMockAddUser) ExpectUserParam1(user entities.User) *mUserMockAddUser {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserMock.Add mock is already set by Set")
	}

	if mmAddUser.defaultExpectation == nil {
		mmAddUser.defaultExpectation = &UserMockAddUserExpectation{}
	}

	if mmAddUser.defaultExpectation.params != nil {
		mmAddUser.mock.t.Fatalf("UserMock.Add mock is already set by Expect")
	}

	if mmAddUser.defaultExpectation.paramPtrs == nil {
		mmAddUser.defaultExpectation.paramPtrs = &UserMockAddUserParamPtrs{}
	}
	mmAddUser.defaultExpectation.paramPtrs.user = &user

	return mmAddUser
}

// Inspect accepts an inspector function that has same arguments as the UserI.Add
func (mmAddUser *mUserMockAddUser) Inspect(f func(user entities.User)) *mUserMockAddUser {
	if mmAddUser.mock.inspectFuncAddUser != nil {
		mmAddUser.mock.t.Fatalf("Inspect function is already set for UserMock.Add")
	}

	mmAddUser.mock.inspectFuncAddUser = f

	return mmAddUser
}

// Return sets up results that will be returned by UserI.Add
func (mmAddUser *mUserMockAddUser) Return(err error) *UserMock {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserMock.Add mock is already set by Set")
	}

	if mmAddUser.defaultExpectation == nil {
		mmAddUser.defaultExpectation = &UserMockAddUserExpectation{mock: mmAddUser.mock}
	}
	mmAddUser.defaultExpectation.results = &UserMockAddUserResults{err}
	return mmAddUser.mock
}

// Set uses given function f to mock the UserI.Add method
func (mmAddUser *mUserMockAddUser) Set(f func(user entities.User) (err error)) *UserMock {
	if mmAddUser.defaultExpectation != nil {
		mmAddUser.mock.t.Fatalf("Default expectation is already set for the UserI.Add method")
	}

	if len(mmAddUser.expectations) > 0 {
		mmAddUser.mock.t.Fatalf("Some expectations are already set for the UserI.Add method")
	}

	mmAddUser.mock.funcAddUser = f
	return mmAddUser.mock
}

// When sets expectation for the UserI.Add which will trigger the result defined by the following
// Then helper
func (mmAddUser *mUserMockAddUser) When(user entities.User) *UserMockAddUserExpectation {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserMock.Add mock is already set by Set")
	}

	expectation := &UserMockAddUserExpectation{
		mock:   mmAddUser.mock,
		params: &UserMockAddUserParams{user},
	}
	mmAddUser.expectations = append(mmAddUser.expectations, expectation)
	return expectation
}

// Then sets up UserI.Add return parameters for the expectation previously defined by the When method
func (e *UserMockAddUserExpectation) Then(err error) *UserMock {
	e.results = &UserMockAddUserResults{err}
	return e.mock
}

// Times sets number of times UserI.Add should be invoked
func (mmAddUser *mUserMockAddUser) Times(n uint64) *mUserMockAddUser {
	if n == 0 {
		mmAddUser.mock.t.Fatalf("Times of UserMock.Add mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddUser.expectedInvocations, n)
	return mmAddUser
}

func (mmAddUser *mUserMockAddUser) invocationsDone() bool {
	if len(mmAddUser.expectations) == 0 && mmAddUser.defaultExpectation == nil && mmAddUser.mock.funcAddUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddUser.mock.afterAddUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddUser implements repo.UserI
func (mmAddUser *UserMock) Add(user entities.User) (err error) {
	mm_atomic.AddUint64(&mmAddUser.beforeAddUserCounter, 1)
	defer mm_atomic.AddUint64(&mmAddUser.afterAddUserCounter, 1)

	if mmAddUser.inspectFuncAddUser != nil {
		mmAddUser.inspectFuncAddUser(user)
	}

	mm_params := UserMockAddUserParams{user}

	// Record call args
	mmAddUser.AddUserMock.mutex.Lock()
	mmAddUser.AddUserMock.callArgs = append(mmAddUser.AddUserMock.callArgs, &mm_params)
	mmAddUser.AddUserMock.mutex.Unlock()

	for _, e := range mmAddUser.AddUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddUser.AddUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddUser.AddUserMock.defaultExpectation.Counter, 1)
		mm_want := mmAddUser.AddUserMock.defaultExpectation.params
		mm_want_ptrs := mmAddUser.AddUserMock.defaultExpectation.paramPtrs

		mm_got := UserMockAddUserParams{user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmAddUser.t.Errorf("UserMock.Add got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddUser.t.Errorf("UserMock.Add got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddUser.AddUserMock.defaultExpectation.results
		if mm_results == nil {
			mmAddUser.t.Fatal("No results are set for the UserMock.Add")
		}
		return (*mm_results).err
	}
	if mmAddUser.funcAddUser != nil {
		return mmAddUser.funcAddUser(user)
	}
	mmAddUser.t.Fatalf("Unexpected call to UserMock.Add. %v", user)
	return
}

// AddUserAfterCounter returns a count of finished UserMock.AddUser invocations
func (mmAddUser *UserMock) AddUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUser.afterAddUserCounter)
}

// AddUserBeforeCounter returns a count of UserMock.AddUser invocations
func (mmAddUser *UserMock) AddUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUser.beforeAddUserCounter)
}

// Calls returns a list of arguments used in each call to UserMock.AddUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddUser *mUserMockAddUser) Calls() []*UserMockAddUserParams {
	mmAddUser.mutex.RLock()

	argCopy := make([]*UserMockAddUserParams, len(mmAddUser.callArgs))
	copy(argCopy, mmAddUser.callArgs)

	mmAddUser.mutex.RUnlock()

	return argCopy
}

// MinimockAddUserDone returns true if the count of the AddUser invocations corresponds
// the number of defined expectations
func (m *UserMock) MinimockAddUserDone() bool {
	if m.AddUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddUserMock.invocationsDone()
}

// MinimockAddUserInspect logs each unmet expectation
func (m *UserMock) MinimockAddUserInspect() {
	for _, e := range m.AddUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserMock.Add with params: %#v", *e.params)
		}
	}

	afterAddUserCounter := mm_atomic.LoadUint64(&m.afterAddUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddUserMock.defaultExpectation != nil && afterAddUserCounter < 1 {
		if m.AddUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserMock.Add")
		} else {
			m.t.Errorf("Expected call to UserMock.Add with params: %#v", *m.AddUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddUser != nil && afterAddUserCounter < 1 {
		m.t.Error("Expected call to UserMock.Add")
	}

	if !m.AddUserMock.invocationsDone() && afterAddUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserMock.Add but found %d calls",
			mm_atomic.LoadUint64(&m.AddUserMock.expectedInvocations), afterAddUserCounter)
	}
}

type mUserMockGetUser struct {
	optional           bool
	mock               *UserMock
	defaultExpectation *UserMockGetUserExpectation
	expectations       []*UserMockGetUserExpectation

	callArgs []*UserMockGetUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserMockGetUserExpectation specifies expectation struct of the UserI.Get
type UserMockGetUserExpectation struct {
	mock      *UserMock
	params    *UserMockGetUserParams
	paramPtrs *UserMockGetUserParamPtrs
	results   *UserMockGetUserResults
	Counter   uint64
}

// UserMockGetUserParams contains parameters of the UserI.Get
type UserMockGetUserParams struct {
	mail string
}

// UserMockGetUserParamPtrs contains pointers to parameters of the UserI.Get
type UserMockGetUserParamPtrs struct {
	mail *string
}

// UserMockGetUserResults contains results of the UserI.Get
type UserMockGetUserResults struct {
	up1 *entities.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUser *mUserMockGetUser) Optional() *mUserMockGetUser {
	mmGetUser.optional = true
	return mmGetUser
}

// Expect sets up expected params for UserI.Get
func (mmGetUser *mUserMockGetUser) Expect(mail string) *mUserMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserMock.Get mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.paramPtrs != nil {
		mmGetUser.mock.t.Fatalf("UserMock.Get mock is already set by ExpectParams functions")
	}

	mmGetUser.defaultExpectation.params = &UserMockGetUserParams{mail}
	for _, e := range mmGetUser.expectations {
		if minimock.Equal(e.params, mmGetUser.defaultExpectation.params) {
			mmGetUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUser.defaultExpectation.params)
		}
	}

	return mmGetUser
}

// ExpectMailParam1 sets up expected param mail for UserI.Get
func (mmGetUser *mUserMockGetUser) ExpectMailParam1(mail string) *mUserMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserMock.Get mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.params != nil {
		mmGetUser.mock.t.Fatalf("UserMock.Get mock is already set by Expect")
	}

	if mmGetUser.defaultExpectation.paramPtrs == nil {
		mmGetUser.defaultExpectation.paramPtrs = &UserMockGetUserParamPtrs{}
	}
	mmGetUser.defaultExpectation.paramPtrs.mail = &mail

	return mmGetUser
}

// Inspect accepts an inspector function that has same arguments as the UserI.Get
func (mmGetUser *mUserMockGetUser) Inspect(f func(mail string)) *mUserMockGetUser {
	if mmGetUser.mock.inspectFuncGetUser != nil {
		mmGetUser.mock.t.Fatalf("Inspect function is already set for UserMock.Get")
	}

	mmGetUser.mock.inspectFuncGetUser = f

	return mmGetUser
}

// Return sets up results that will be returned by UserI.Get
func (mmGetUser *mUserMockGetUser) Return(up1 *entities.User, err error) *UserMock {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserMock.Get mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserMockGetUserExpectation{mock: mmGetUser.mock}
	}
	mmGetUser.defaultExpectation.results = &UserMockGetUserResults{up1, err}
	return mmGetUser.mock
}

// Set uses given function f to mock the UserI.Get method
func (mmGetUser *mUserMockGetUser) Set(f func(mail string) (up1 *entities.User, err error)) *UserMock {
	if mmGetUser.defaultExpectation != nil {
		mmGetUser.mock.t.Fatalf("Default expectation is already set for the UserI.Get method")
	}

	if len(mmGetUser.expectations) > 0 {
		mmGetUser.mock.t.Fatalf("Some expectations are already set for the UserI.Get method")
	}

	mmGetUser.mock.funcGetUser = f
	return mmGetUser.mock
}

// When sets expectation for the UserI.Get which will trigger the result defined by the following
// Then helper
func (mmGetUser *mUserMockGetUser) When(mail string) *UserMockGetUserExpectation {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserMock.Get mock is already set by Set")
	}

	expectation := &UserMockGetUserExpectation{
		mock:   mmGetUser.mock,
		params: &UserMockGetUserParams{mail},
	}
	mmGetUser.expectations = append(mmGetUser.expectations, expectation)
	return expectation
}

// Then sets up UserI.Get return parameters for the expectation previously defined by the When method
func (e *UserMockGetUserExpectation) Then(up1 *entities.User, err error) *UserMock {
	e.results = &UserMockGetUserResults{up1, err}
	return e.mock
}

// Times sets number of times UserI.Get should be invoked
func (mmGetUser *mUserMockGetUser) Times(n uint64) *mUserMockGetUser {
	if n == 0 {
		mmGetUser.mock.t.Fatalf("Times of UserMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUser.expectedInvocations, n)
	return mmGetUser
}

func (mmGetUser *mUserMockGetUser) invocationsDone() bool {
	if len(mmGetUser.expectations) == 0 && mmGetUser.defaultExpectation == nil && mmGetUser.mock.funcGetUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUser.mock.afterGetUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUser implements repo.UserI
func (mmGetUser *UserMock) Get(mail string) (up1 *entities.User, err error) {
	mm_atomic.AddUint64(&mmGetUser.beforeGetUserCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUser.afterGetUserCounter, 1)

	if mmGetUser.inspectFuncGetUser != nil {
		mmGetUser.inspectFuncGetUser(mail)
	}

	mm_params := UserMockGetUserParams{mail}

	// Record call args
	mmGetUser.GetUserMock.mutex.Lock()
	mmGetUser.GetUserMock.callArgs = append(mmGetUser.GetUserMock.callArgs, &mm_params)
	mmGetUser.GetUserMock.mutex.Unlock()

	for _, e := range mmGetUser.GetUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUser.GetUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUser.GetUserMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUser.GetUserMock.defaultExpectation.params
		mm_want_ptrs := mmGetUser.GetUserMock.defaultExpectation.paramPtrs

		mm_got := UserMockGetUserParams{mail}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.mail != nil && !minimock.Equal(*mm_want_ptrs.mail, mm_got.mail) {
				mmGetUser.t.Errorf("UserMock.Get got unexpected parameter mail, want: %#v, got: %#v%s\n", *mm_want_ptrs.mail, mm_got.mail, minimock.Diff(*mm_want_ptrs.mail, mm_got.mail))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUser.t.Errorf("UserMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUser.GetUserMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUser.t.Fatal("No results are set for the UserMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUser.funcGetUser != nil {
		return mmGetUser.funcGetUser(mail)
	}
	mmGetUser.t.Fatalf("Unexpected call to UserMock.Get. %v", mail)
	return
}

// GetUserAfterCounter returns a count of finished UserMock.GetUser invocations
func (mmGetUser *UserMock) GetUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUser.afterGetUserCounter)
}

// GetUserBeforeCounter returns a count of UserMock.GetUser invocations
func (mmGetUser *UserMock) GetUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUser.beforeGetUserCounter)
}

// Calls returns a list of arguments used in each call to UserMock.GetUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUser *mUserMockGetUser) Calls() []*UserMockGetUserParams {
	mmGetUser.mutex.RLock()

	argCopy := make([]*UserMockGetUserParams, len(mmGetUser.callArgs))
	copy(argCopy, mmGetUser.callArgs)

	mmGetUser.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserDone returns true if the count of the GetUser invocations corresponds
// the number of defined expectations
func (m *UserMock) MinimockGetUserDone() bool {
	if m.GetUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserMock.invocationsDone()
}

// MinimockGetUserInspect logs each unmet expectation
func (m *UserMock) MinimockGetUserInspect() {
	for _, e := range m.GetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserMock.Get with params: %#v", *e.params)
		}
	}

	afterGetUserCounter := mm_atomic.LoadUint64(&m.afterGetUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserMock.defaultExpectation != nil && afterGetUserCounter < 1 {
		if m.GetUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserMock.Get")
		} else {
			m.t.Errorf("Expected call to UserMock.Get with params: %#v", *m.GetUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUser != nil && afterGetUserCounter < 1 {
		m.t.Error("Expected call to UserMock.Get")
	}

	if !m.GetUserMock.invocationsDone() && afterGetUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserMock.expectedInvocations), afterGetUserCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddUserInspect()

			m.MinimockGetUserInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddUserDone() &&
		m.MinimockGetUserDone()
}
