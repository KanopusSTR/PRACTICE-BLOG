// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package minimock

//go:generate minimock -i server/internal/repo.PostI -o mock_post.go -n PostMock -p minimock

import (
	"server/internal/entities"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PostMock implements repo.PostI
type PostMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAdd          func(header *string, body *string, date time.Time, authorMail string) (i1 int)
	inspectFuncAdd   func(header *string, body *string, date time.Time, authorMail string)
	afterAddCounter  uint64
	beforeAddCounter uint64
	AddMock          mPostMockAdd

	funcGetPost          func(id int) (pp1 *entities.Post, err error)
	inspectFuncGetPost   func(id int)
	afterGetPostCounter  uint64
	beforeGetPostCounter uint64
	GetPostMock          mPostMockGetPost

	funcGetPosts          func() (pa1 []interface{})
	inspectFuncGetPosts   func()
	afterGetPostsCounter  uint64
	beforeGetPostsCounter uint64
	GetPostsMock          mPostMockGetPosts

	funcRemove          func(postId int) (err error)
	inspectFuncRemove   func(postId int)
	afterRemoveCounter  uint64
	beforeRemoveCounter uint64
	RemoveMock          mPostMockRemove

	funcUpdate          func(postId int, header *string, body *string) (err error)
	inspectFuncUpdate   func(postId int, header *string, body *string)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mPostMockUpdate
}

// NewPostMock returns a mock for repo.PostI
func NewPostMock(t minimock.Tester) *PostMock {
	m := &PostMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddMock = mPostMockAdd{mock: m}
	m.AddMock.callArgs = []*PostMockAddParams{}

	m.GetPostMock = mPostMockGetPost{mock: m}
	m.GetPostMock.callArgs = []*PostMockGetPostParams{}

	m.GetPostsMock = mPostMockGetPosts{mock: m}

	m.RemoveMock = mPostMockRemove{mock: m}
	m.RemoveMock.callArgs = []*PostMockRemoveParams{}

	m.UpdateMock = mPostMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*PostMockUpdateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPostMockAdd struct {
	optional           bool
	mock               *PostMock
	defaultExpectation *PostMockAddExpectation
	expectations       []*PostMockAddExpectation

	callArgs []*PostMockAddParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// PostMockAddExpectation specifies expectation struct of the PostI.Add
type PostMockAddExpectation struct {
	mock      *PostMock
	params    *PostMockAddParams
	paramPtrs *PostMockAddParamPtrs
	results   *PostMockAddResults
	Counter   uint64
}

// PostMockAddParams contains parameters of the PostI.Add
type PostMockAddParams struct {
	header     *string
	body       *string
	date       time.Time
	authorMail string
}

// PostMockAddParamPtrs contains pointers to parameters of the PostI.Add
type PostMockAddParamPtrs struct {
	header     **string
	body       **string
	date       *time.Time
	authorMail *string
}

// PostMockAddResults contains results of the PostI.Add
type PostMockAddResults struct {
	i1 int
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAdd *mPostMockAdd) Optional() *mPostMockAdd {
	mmAdd.optional = true
	return mmAdd
}

// Expect sets up expected params for PostI.Add
func (mmAdd *mPostMockAdd) Expect(header *string, body *string, date time.Time, authorMail string) *mPostMockAdd {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &PostMockAddExpectation{}
	}

	if mmAdd.defaultExpectation.paramPtrs != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by ExpectParams functions")
	}

	mmAdd.defaultExpectation.params = &PostMockAddParams{header, body, date, authorMail}
	for _, e := range mmAdd.expectations {
		if minimock.Equal(e.params, mmAdd.defaultExpectation.params) {
			mmAdd.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAdd.defaultExpectation.params)
		}
	}

	return mmAdd
}

// ExpectHeaderParam1 sets up expected param header for PostI.Add
func (mmAdd *mPostMockAdd) ExpectHeaderParam1(header *string) *mPostMockAdd {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &PostMockAddExpectation{}
	}

	if mmAdd.defaultExpectation.params != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Expect")
	}

	if mmAdd.defaultExpectation.paramPtrs == nil {
		mmAdd.defaultExpectation.paramPtrs = &PostMockAddParamPtrs{}
	}
	mmAdd.defaultExpectation.paramPtrs.header = &header

	return mmAdd
}

// ExpectBodyParam2 sets up expected param body for PostI.Add
func (mmAdd *mPostMockAdd) ExpectBodyParam2(body *string) *mPostMockAdd {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &PostMockAddExpectation{}
	}

	if mmAdd.defaultExpectation.params != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Expect")
	}

	if mmAdd.defaultExpectation.paramPtrs == nil {
		mmAdd.defaultExpectation.paramPtrs = &PostMockAddParamPtrs{}
	}
	mmAdd.defaultExpectation.paramPtrs.body = &body

	return mmAdd
}

// ExpectDateParam3 sets up expected param date for PostI.Add
func (mmAdd *mPostMockAdd) ExpectDateParam3(date time.Time) *mPostMockAdd {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &PostMockAddExpectation{}
	}

	if mmAdd.defaultExpectation.params != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Expect")
	}

	if mmAdd.defaultExpectation.paramPtrs == nil {
		mmAdd.defaultExpectation.paramPtrs = &PostMockAddParamPtrs{}
	}
	mmAdd.defaultExpectation.paramPtrs.date = &date

	return mmAdd
}

// ExpectAuthorMailParam4 sets up expected param authorMail for PostI.Add
func (mmAdd *mPostMockAdd) ExpectAuthorMailParam4(authorMail string) *mPostMockAdd {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &PostMockAddExpectation{}
	}

	if mmAdd.defaultExpectation.params != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Expect")
	}

	if mmAdd.defaultExpectation.paramPtrs == nil {
		mmAdd.defaultExpectation.paramPtrs = &PostMockAddParamPtrs{}
	}
	mmAdd.defaultExpectation.paramPtrs.authorMail = &authorMail

	return mmAdd
}

// Inspect accepts an inspector function that has same arguments as the PostI.Add
func (mmAdd *mPostMockAdd) Inspect(f func(header *string, body *string, date time.Time, authorMail string)) *mPostMockAdd {
	if mmAdd.mock.inspectFuncAdd != nil {
		mmAdd.mock.t.Fatalf("Inspect function is already set for PostMock.Add")
	}

	mmAdd.mock.inspectFuncAdd = f

	return mmAdd
}

// Return sets up results that will be returned by PostI.Add
func (mmAdd *mPostMockAdd) Return(i1 int) *PostMock {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &PostMockAddExpectation{mock: mmAdd.mock}
	}
	mmAdd.defaultExpectation.results = &PostMockAddResults{i1}
	return mmAdd.mock
}

// Set uses given function f to mock the PostI.Add method
func (mmAdd *mPostMockAdd) Set(f func(header *string, body *string, date time.Time, authorMail string) (i1 int)) *PostMock {
	if mmAdd.defaultExpectation != nil {
		mmAdd.mock.t.Fatalf("Default expectation is already set for the PostI.Add method")
	}

	if len(mmAdd.expectations) > 0 {
		mmAdd.mock.t.Fatalf("Some expectations are already set for the PostI.Add method")
	}

	mmAdd.mock.funcAdd = f
	return mmAdd.mock
}

// When sets expectation for the PostI.Add which will trigger the result defined by the following
// Then helper
func (mmAdd *mPostMockAdd) When(header *string, body *string, date time.Time, authorMail string) *PostMockAddExpectation {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("PostMock.Add mock is already set by Set")
	}

	expectation := &PostMockAddExpectation{
		mock:   mmAdd.mock,
		params: &PostMockAddParams{header, body, date, authorMail},
	}
	mmAdd.expectations = append(mmAdd.expectations, expectation)
	return expectation
}

// Then sets up PostI.Add return parameters for the expectation previously defined by the When method
func (e *PostMockAddExpectation) Then(i1 int) *PostMock {
	e.results = &PostMockAddResults{i1}
	return e.mock
}

// Times sets number of times PostI.Add should be invoked
func (mmAdd *mPostMockAdd) Times(n uint64) *mPostMockAdd {
	if n == 0 {
		mmAdd.mock.t.Fatalf("Times of PostMock.Add mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAdd.expectedInvocations, n)
	return mmAdd
}

func (mmAdd *mPostMockAdd) invocationsDone() bool {
	if len(mmAdd.expectations) == 0 && mmAdd.defaultExpectation == nil && mmAdd.mock.funcAdd == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAdd.mock.afterAddCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAdd.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Add implements repo.PostI
func (mmAdd *PostMock) Add(header *string, body *string, date time.Time, authorMail string) (i1 int) {
	mm_atomic.AddUint64(&mmAdd.beforeAddCounter, 1)
	defer mm_atomic.AddUint64(&mmAdd.afterAddCounter, 1)

	if mmAdd.inspectFuncAdd != nil {
		mmAdd.inspectFuncAdd(header, body, date, authorMail)
	}

	mm_params := PostMockAddParams{header, body, date, authorMail}

	// Record call args
	mmAdd.AddMock.mutex.Lock()
	mmAdd.AddMock.callArgs = append(mmAdd.AddMock.callArgs, &mm_params)
	mmAdd.AddMock.mutex.Unlock()

	for _, e := range mmAdd.AddMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1
		}
	}

	if mmAdd.AddMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAdd.AddMock.defaultExpectation.Counter, 1)
		mm_want := mmAdd.AddMock.defaultExpectation.params
		mm_want_ptrs := mmAdd.AddMock.defaultExpectation.paramPtrs

		mm_got := PostMockAddParams{header, body, date, authorMail}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.header != nil && !minimock.Equal(*mm_want_ptrs.header, mm_got.header) {
				mmAdd.t.Errorf("PostMock.Add got unexpected parameter header, want: %#v, got: %#v%s\n", *mm_want_ptrs.header, mm_got.header, minimock.Diff(*mm_want_ptrs.header, mm_got.header))
			}

			if mm_want_ptrs.body != nil && !minimock.Equal(*mm_want_ptrs.body, mm_got.body) {
				mmAdd.t.Errorf("PostMock.Add got unexpected parameter body, want: %#v, got: %#v%s\n", *mm_want_ptrs.body, mm_got.body, minimock.Diff(*mm_want_ptrs.body, mm_got.body))
			}

			if mm_want_ptrs.date != nil && !minimock.Equal(*mm_want_ptrs.date, mm_got.date) {
				mmAdd.t.Errorf("PostMock.Add got unexpected parameter date, want: %#v, got: %#v%s\n", *mm_want_ptrs.date, mm_got.date, minimock.Diff(*mm_want_ptrs.date, mm_got.date))
			}

			if mm_want_ptrs.authorMail != nil && !minimock.Equal(*mm_want_ptrs.authorMail, mm_got.authorMail) {
				mmAdd.t.Errorf("PostMock.Add got unexpected parameter authorMail, want: %#v, got: %#v%s\n", *mm_want_ptrs.authorMail, mm_got.authorMail, minimock.Diff(*mm_want_ptrs.authorMail, mm_got.authorMail))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAdd.t.Errorf("PostMock.Add got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAdd.AddMock.defaultExpectation.results
		if mm_results == nil {
			mmAdd.t.Fatal("No results are set for the PostMock.Add")
		}
		return (*mm_results).i1
	}
	if mmAdd.funcAdd != nil {
		return mmAdd.funcAdd(header, body, date, authorMail)
	}
	mmAdd.t.Fatalf("Unexpected call to PostMock.Add. %v %v %v %v", header, body, date, authorMail)
	return
}

// AddAfterCounter returns a count of finished PostMock.Add invocations
func (mmAdd *PostMock) AddAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAdd.afterAddCounter)
}

// AddBeforeCounter returns a count of PostMock.Add invocations
func (mmAdd *PostMock) AddBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAdd.beforeAddCounter)
}

// Calls returns a list of arguments used in each call to PostMock.Add.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAdd *mPostMockAdd) Calls() []*PostMockAddParams {
	mmAdd.mutex.RLock()

	argCopy := make([]*PostMockAddParams, len(mmAdd.callArgs))
	copy(argCopy, mmAdd.callArgs)

	mmAdd.mutex.RUnlock()

	return argCopy
}

// MinimockAddDone returns true if the count of the Add invocations corresponds
// the number of defined expectations
func (m *PostMock) MinimockAddDone() bool {
	if m.AddMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddMock.invocationsDone()
}

// MinimockAddInspect logs each unmet expectation
func (m *PostMock) MinimockAddInspect() {
	for _, e := range m.AddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PostMock.Add with params: %#v", *e.params)
		}
	}

	afterAddCounter := mm_atomic.LoadUint64(&m.afterAddCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddMock.defaultExpectation != nil && afterAddCounter < 1 {
		if m.AddMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PostMock.Add")
		} else {
			m.t.Errorf("Expected call to PostMock.Add with params: %#v", *m.AddMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAdd != nil && afterAddCounter < 1 {
		m.t.Error("Expected call to PostMock.Add")
	}

	if !m.AddMock.invocationsDone() && afterAddCounter > 0 {
		m.t.Errorf("Expected %d calls to PostMock.Add but found %d calls",
			mm_atomic.LoadUint64(&m.AddMock.expectedInvocations), afterAddCounter)
	}
}

type mPostMockGetPost struct {
	optional           bool
	mock               *PostMock
	defaultExpectation *PostMockGetPostExpectation
	expectations       []*PostMockGetPostExpectation

	callArgs []*PostMockGetPostParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// PostMockGetPostExpectation specifies expectation struct of the PostI.GetPost
type PostMockGetPostExpectation struct {
	mock      *PostMock
	params    *PostMockGetPostParams
	paramPtrs *PostMockGetPostParamPtrs
	results   *PostMockGetPostResults
	Counter   uint64
}

// PostMockGetPostParams contains parameters of the PostI.GetPost
type PostMockGetPostParams struct {
	id int
}

// PostMockGetPostParamPtrs contains pointers to parameters of the PostI.GetPost
type PostMockGetPostParamPtrs struct {
	id *int
}

// PostMockGetPostResults contains results of the PostI.GetPost
type PostMockGetPostResults struct {
	pp1 *entities.Post
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetPost *mPostMockGetPost) Optional() *mPostMockGetPost {
	mmGetPost.optional = true
	return mmGetPost
}

// Expect sets up expected params for PostI.GetPost
func (mmGetPost *mPostMockGetPost) Expect(id int) *mPostMockGetPost {
	if mmGetPost.mock.funcGetPost != nil {
		mmGetPost.mock.t.Fatalf("PostMock.GetPost mock is already set by Set")
	}

	if mmGetPost.defaultExpectation == nil {
		mmGetPost.defaultExpectation = &PostMockGetPostExpectation{}
	}

	if mmGetPost.defaultExpectation.paramPtrs != nil {
		mmGetPost.mock.t.Fatalf("PostMock.GetPost mock is already set by ExpectParams functions")
	}

	mmGetPost.defaultExpectation.params = &PostMockGetPostParams{id}
	for _, e := range mmGetPost.expectations {
		if minimock.Equal(e.params, mmGetPost.defaultExpectation.params) {
			mmGetPost.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPost.defaultExpectation.params)
		}
	}

	return mmGetPost
}

// ExpectIdParam1 sets up expected param id for PostI.GetPost
func (mmGetPost *mPostMockGetPost) ExpectIdParam1(id int) *mPostMockGetPost {
	if mmGetPost.mock.funcGetPost != nil {
		mmGetPost.mock.t.Fatalf("PostMock.GetPost mock is already set by Set")
	}

	if mmGetPost.defaultExpectation == nil {
		mmGetPost.defaultExpectation = &PostMockGetPostExpectation{}
	}

	if mmGetPost.defaultExpectation.params != nil {
		mmGetPost.mock.t.Fatalf("PostMock.GetPost mock is already set by Expect")
	}

	if mmGetPost.defaultExpectation.paramPtrs == nil {
		mmGetPost.defaultExpectation.paramPtrs = &PostMockGetPostParamPtrs{}
	}
	mmGetPost.defaultExpectation.paramPtrs.id = &id

	return mmGetPost
}

// Inspect accepts an inspector function that has same arguments as the PostI.GetPost
func (mmGetPost *mPostMockGetPost) Inspect(f func(id int)) *mPostMockGetPost {
	if mmGetPost.mock.inspectFuncGetPost != nil {
		mmGetPost.mock.t.Fatalf("Inspect function is already set for PostMock.GetPost")
	}

	mmGetPost.mock.inspectFuncGetPost = f

	return mmGetPost
}

// Return sets up results that will be returned by PostI.GetPost
func (mmGetPost *mPostMockGetPost) Return(pp1 *entities.Post, err error) *PostMock {
	if mmGetPost.mock.funcGetPost != nil {
		mmGetPost.mock.t.Fatalf("PostMock.GetPost mock is already set by Set")
	}

	if mmGetPost.defaultExpectation == nil {
		mmGetPost.defaultExpectation = &PostMockGetPostExpectation{mock: mmGetPost.mock}
	}
	mmGetPost.defaultExpectation.results = &PostMockGetPostResults{pp1, err}
	return mmGetPost.mock
}

// Set uses given function f to mock the PostI.GetPost method
func (mmGetPost *mPostMockGetPost) Set(f func(id int) (pp1 *entities.Post, err error)) *PostMock {
	if mmGetPost.defaultExpectation != nil {
		mmGetPost.mock.t.Fatalf("Default expectation is already set for the PostI.GetPost method")
	}

	if len(mmGetPost.expectations) > 0 {
		mmGetPost.mock.t.Fatalf("Some expectations are already set for the PostI.GetPost method")
	}

	mmGetPost.mock.funcGetPost = f
	return mmGetPost.mock
}

// When sets expectation for the PostI.GetPost which will trigger the result defined by the following
// Then helper
func (mmGetPost *mPostMockGetPost) When(id int) *PostMockGetPostExpectation {
	if mmGetPost.mock.funcGetPost != nil {
		mmGetPost.mock.t.Fatalf("PostMock.GetPost mock is already set by Set")
	}

	expectation := &PostMockGetPostExpectation{
		mock:   mmGetPost.mock,
		params: &PostMockGetPostParams{id},
	}
	mmGetPost.expectations = append(mmGetPost.expectations, expectation)
	return expectation
}

// Then sets up PostI.GetPost return parameters for the expectation previously defined by the When method
func (e *PostMockGetPostExpectation) Then(pp1 *entities.Post, err error) *PostMock {
	e.results = &PostMockGetPostResults{pp1, err}
	return e.mock
}

// Times sets number of times PostI.GetPost should be invoked
func (mmGetPost *mPostMockGetPost) Times(n uint64) *mPostMockGetPost {
	if n == 0 {
		mmGetPost.mock.t.Fatalf("Times of PostMock.GetPost mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetPost.expectedInvocations, n)
	return mmGetPost
}

func (mmGetPost *mPostMockGetPost) invocationsDone() bool {
	if len(mmGetPost.expectations) == 0 && mmGetPost.defaultExpectation == nil && mmGetPost.mock.funcGetPost == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetPost.mock.afterGetPostCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetPost.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetPost implements repo.PostI
func (mmGetPost *PostMock) GetPost(id int) (pp1 *entities.Post, err error) {
	mm_atomic.AddUint64(&mmGetPost.beforeGetPostCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPost.afterGetPostCounter, 1)

	if mmGetPost.inspectFuncGetPost != nil {
		mmGetPost.inspectFuncGetPost(id)
	}

	mm_params := PostMockGetPostParams{id}

	// Record call args
	mmGetPost.GetPostMock.mutex.Lock()
	mmGetPost.GetPostMock.callArgs = append(mmGetPost.GetPostMock.callArgs, &mm_params)
	mmGetPost.GetPostMock.mutex.Unlock()

	for _, e := range mmGetPost.GetPostMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmGetPost.GetPostMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPost.GetPostMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPost.GetPostMock.defaultExpectation.params
		mm_want_ptrs := mmGetPost.GetPostMock.defaultExpectation.paramPtrs

		mm_got := PostMockGetPostParams{id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetPost.t.Errorf("PostMock.GetPost got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPost.t.Errorf("PostMock.GetPost got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPost.GetPostMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPost.t.Fatal("No results are set for the PostMock.GetPost")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmGetPost.funcGetPost != nil {
		return mmGetPost.funcGetPost(id)
	}
	mmGetPost.t.Fatalf("Unexpected call to PostMock.GetPost. %v", id)
	return
}

// GetPostAfterCounter returns a count of finished PostMock.GetPost invocations
func (mmGetPost *PostMock) GetPostAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPost.afterGetPostCounter)
}

// GetPostBeforeCounter returns a count of PostMock.GetPost invocations
func (mmGetPost *PostMock) GetPostBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPost.beforeGetPostCounter)
}

// Calls returns a list of arguments used in each call to PostMock.GetPost.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPost *mPostMockGetPost) Calls() []*PostMockGetPostParams {
	mmGetPost.mutex.RLock()

	argCopy := make([]*PostMockGetPostParams, len(mmGetPost.callArgs))
	copy(argCopy, mmGetPost.callArgs)

	mmGetPost.mutex.RUnlock()

	return argCopy
}

// MinimockGetPostDone returns true if the count of the GetPost invocations corresponds
// the number of defined expectations
func (m *PostMock) MinimockGetPostDone() bool {
	if m.GetPostMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetPostMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetPostMock.invocationsDone()
}

// MinimockGetPostInspect logs each unmet expectation
func (m *PostMock) MinimockGetPostInspect() {
	for _, e := range m.GetPostMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PostMock.GetPost with params: %#v", *e.params)
		}
	}

	afterGetPostCounter := mm_atomic.LoadUint64(&m.afterGetPostCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetPostMock.defaultExpectation != nil && afterGetPostCounter < 1 {
		if m.GetPostMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PostMock.GetPost")
		} else {
			m.t.Errorf("Expected call to PostMock.GetPost with params: %#v", *m.GetPostMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPost != nil && afterGetPostCounter < 1 {
		m.t.Error("Expected call to PostMock.GetPost")
	}

	if !m.GetPostMock.invocationsDone() && afterGetPostCounter > 0 {
		m.t.Errorf("Expected %d calls to PostMock.GetPost but found %d calls",
			mm_atomic.LoadUint64(&m.GetPostMock.expectedInvocations), afterGetPostCounter)
	}
}

type mPostMockGetPosts struct {
	optional           bool
	mock               *PostMock
	defaultExpectation *PostMockGetPostsExpectation
	expectations       []*PostMockGetPostsExpectation

	expectedInvocations uint64
}

// PostMockGetPostsExpectation specifies expectation struct of the PostI.GetPosts
type PostMockGetPostsExpectation struct {
	mock *PostMock

	results *PostMockGetPostsResults
	Counter uint64
}

// PostMockGetPostsResults contains results of the PostI.GetPosts
type PostMockGetPostsResults struct {
	pa1 []interface{}
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetPosts *mPostMockGetPosts) Optional() *mPostMockGetPosts {
	mmGetPosts.optional = true
	return mmGetPosts
}

// Expect sets up expected params for PostI.GetPosts
func (mmGetPosts *mPostMockGetPosts) Expect() *mPostMockGetPosts {
	if mmGetPosts.mock.funcGetPosts != nil {
		mmGetPosts.mock.t.Fatalf("PostMock.GetPosts mock is already set by Set")
	}

	if mmGetPosts.defaultExpectation == nil {
		mmGetPosts.defaultExpectation = &PostMockGetPostsExpectation{}
	}

	return mmGetPosts
}

// Inspect accepts an inspector function that has same arguments as the PostI.GetPosts
func (mmGetPosts *mPostMockGetPosts) Inspect(f func()) *mPostMockGetPosts {
	if mmGetPosts.mock.inspectFuncGetPosts != nil {
		mmGetPosts.mock.t.Fatalf("Inspect function is already set for PostMock.GetPosts")
	}

	mmGetPosts.mock.inspectFuncGetPosts = f

	return mmGetPosts
}

// Return sets up results that will be returned by PostI.GetPosts
func (mmGetPosts *mPostMockGetPosts) Return(pa1 []interface{}) *PostMock {
	if mmGetPosts.mock.funcGetPosts != nil {
		mmGetPosts.mock.t.Fatalf("PostMock.GetPosts mock is already set by Set")
	}

	if mmGetPosts.defaultExpectation == nil {
		mmGetPosts.defaultExpectation = &PostMockGetPostsExpectation{mock: mmGetPosts.mock}
	}
	mmGetPosts.defaultExpectation.results = &PostMockGetPostsResults{pa1}
	return mmGetPosts.mock
}

// Set uses given function f to mock the PostI.GetPosts method
func (mmGetPosts *mPostMockGetPosts) Set(f func() (pa1 []interface{})) *PostMock {
	if mmGetPosts.defaultExpectation != nil {
		mmGetPosts.mock.t.Fatalf("Default expectation is already set for the PostI.GetPosts method")
	}

	if len(mmGetPosts.expectations) > 0 {
		mmGetPosts.mock.t.Fatalf("Some expectations are already set for the PostI.GetPosts method")
	}

	mmGetPosts.mock.funcGetPosts = f
	return mmGetPosts.mock
}

// Times sets number of times PostI.GetPosts should be invoked
func (mmGetPosts *mPostMockGetPosts) Times(n uint64) *mPostMockGetPosts {
	if n == 0 {
		mmGetPosts.mock.t.Fatalf("Times of PostMock.GetPosts mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetPosts.expectedInvocations, n)
	return mmGetPosts
}

func (mmGetPosts *mPostMockGetPosts) invocationsDone() bool {
	if len(mmGetPosts.expectations) == 0 && mmGetPosts.defaultExpectation == nil && mmGetPosts.mock.funcGetPosts == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetPosts.mock.afterGetPostsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetPosts.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetPosts implements repo.PostI
func (mmGetPosts *PostMock) GetPosts() (pa1 []interface{}) {
	mm_atomic.AddUint64(&mmGetPosts.beforeGetPostsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPosts.afterGetPostsCounter, 1)

	if mmGetPosts.inspectFuncGetPosts != nil {
		mmGetPosts.inspectFuncGetPosts()
	}

	if mmGetPosts.GetPostsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPosts.GetPostsMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPosts.GetPostsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPosts.t.Fatal("No results are set for the PostMock.GetPosts")
		}
		return (*mm_results).pa1
	}
	if mmGetPosts.funcGetPosts != nil {
		return mmGetPosts.funcGetPosts()
	}
	mmGetPosts.t.Fatalf("Unexpected call to PostMock.GetPosts.")
	return
}

// GetPostsAfterCounter returns a count of finished PostMock.GetPosts invocations
func (mmGetPosts *PostMock) GetPostsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPosts.afterGetPostsCounter)
}

// GetPostsBeforeCounter returns a count of PostMock.GetPosts invocations
func (mmGetPosts *PostMock) GetPostsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPosts.beforeGetPostsCounter)
}

// MinimockGetPostsDone returns true if the count of the GetPosts invocations corresponds
// the number of defined expectations
func (m *PostMock) MinimockGetPostsDone() bool {
	if m.GetPostsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetPostsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetPostsMock.invocationsDone()
}

// MinimockGetPostsInspect logs each unmet expectation
func (m *PostMock) MinimockGetPostsInspect() {
	for _, e := range m.GetPostsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PostMock.GetPosts")
		}
	}

	afterGetPostsCounter := mm_atomic.LoadUint64(&m.afterGetPostsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetPostsMock.defaultExpectation != nil && afterGetPostsCounter < 1 {
		m.t.Error("Expected call to PostMock.GetPosts")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPosts != nil && afterGetPostsCounter < 1 {
		m.t.Error("Expected call to PostMock.GetPosts")
	}

	if !m.GetPostsMock.invocationsDone() && afterGetPostsCounter > 0 {
		m.t.Errorf("Expected %d calls to PostMock.GetPosts but found %d calls",
			mm_atomic.LoadUint64(&m.GetPostsMock.expectedInvocations), afterGetPostsCounter)
	}
}

type mPostMockRemove struct {
	optional           bool
	mock               *PostMock
	defaultExpectation *PostMockRemoveExpectation
	expectations       []*PostMockRemoveExpectation

	callArgs []*PostMockRemoveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// PostMockRemoveExpectation specifies expectation struct of the PostI.Remove
type PostMockRemoveExpectation struct {
	mock      *PostMock
	params    *PostMockRemoveParams
	paramPtrs *PostMockRemoveParamPtrs
	results   *PostMockRemoveResults
	Counter   uint64
}

// PostMockRemoveParams contains parameters of the PostI.Remove
type PostMockRemoveParams struct {
	postId int
}

// PostMockRemoveParamPtrs contains pointers to parameters of the PostI.Remove
type PostMockRemoveParamPtrs struct {
	postId *int
}

// PostMockRemoveResults contains results of the PostI.Remove
type PostMockRemoveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRemove *mPostMockRemove) Optional() *mPostMockRemove {
	mmRemove.optional = true
	return mmRemove
}

// Expect sets up expected params for PostI.Remove
func (mmRemove *mPostMockRemove) Expect(postId int) *mPostMockRemove {
	if mmRemove.mock.funcRemove != nil {
		mmRemove.mock.t.Fatalf("PostMock.Remove mock is already set by Set")
	}

	if mmRemove.defaultExpectation == nil {
		mmRemove.defaultExpectation = &PostMockRemoveExpectation{}
	}

	if mmRemove.defaultExpectation.paramPtrs != nil {
		mmRemove.mock.t.Fatalf("PostMock.Remove mock is already set by ExpectParams functions")
	}

	mmRemove.defaultExpectation.params = &PostMockRemoveParams{postId}
	for _, e := range mmRemove.expectations {
		if minimock.Equal(e.params, mmRemove.defaultExpectation.params) {
			mmRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRemove.defaultExpectation.params)
		}
	}

	return mmRemove
}

// ExpectPostIdParam1 sets up expected param postId for PostI.Remove
func (mmRemove *mPostMockRemove) ExpectPostIdParam1(postId int) *mPostMockRemove {
	if mmRemove.mock.funcRemove != nil {
		mmRemove.mock.t.Fatalf("PostMock.Remove mock is already set by Set")
	}

	if mmRemove.defaultExpectation == nil {
		mmRemove.defaultExpectation = &PostMockRemoveExpectation{}
	}

	if mmRemove.defaultExpectation.params != nil {
		mmRemove.mock.t.Fatalf("PostMock.Remove mock is already set by Expect")
	}

	if mmRemove.defaultExpectation.paramPtrs == nil {
		mmRemove.defaultExpectation.paramPtrs = &PostMockRemoveParamPtrs{}
	}
	mmRemove.defaultExpectation.paramPtrs.postId = &postId

	return mmRemove
}

// Inspect accepts an inspector function that has same arguments as the PostI.Remove
func (mmRemove *mPostMockRemove) Inspect(f func(postId int)) *mPostMockRemove {
	if mmRemove.mock.inspectFuncRemove != nil {
		mmRemove.mock.t.Fatalf("Inspect function is already set for PostMock.Remove")
	}

	mmRemove.mock.inspectFuncRemove = f

	return mmRemove
}

// Return sets up results that will be returned by PostI.Remove
func (mmRemove *mPostMockRemove) Return(err error) *PostMock {
	if mmRemove.mock.funcRemove != nil {
		mmRemove.mock.t.Fatalf("PostMock.Remove mock is already set by Set")
	}

	if mmRemove.defaultExpectation == nil {
		mmRemove.defaultExpectation = &PostMockRemoveExpectation{mock: mmRemove.mock}
	}
	mmRemove.defaultExpectation.results = &PostMockRemoveResults{err}
	return mmRemove.mock
}

// Set uses given function f to mock the PostI.Remove method
func (mmRemove *mPostMockRemove) Set(f func(postId int) (err error)) *PostMock {
	if mmRemove.defaultExpectation != nil {
		mmRemove.mock.t.Fatalf("Default expectation is already set for the PostI.Remove method")
	}

	if len(mmRemove.expectations) > 0 {
		mmRemove.mock.t.Fatalf("Some expectations are already set for the PostI.Remove method")
	}

	mmRemove.mock.funcRemove = f
	return mmRemove.mock
}

// When sets expectation for the PostI.Remove which will trigger the result defined by the following
// Then helper
func (mmRemove *mPostMockRemove) When(postId int) *PostMockRemoveExpectation {
	if mmRemove.mock.funcRemove != nil {
		mmRemove.mock.t.Fatalf("PostMock.Remove mock is already set by Set")
	}

	expectation := &PostMockRemoveExpectation{
		mock:   mmRemove.mock,
		params: &PostMockRemoveParams{postId},
	}
	mmRemove.expectations = append(mmRemove.expectations, expectation)
	return expectation
}

// Then sets up PostI.Remove return parameters for the expectation previously defined by the When method
func (e *PostMockRemoveExpectation) Then(err error) *PostMock {
	e.results = &PostMockRemoveResults{err}
	return e.mock
}

// Times sets number of times PostI.Remove should be invoked
func (mmRemove *mPostMockRemove) Times(n uint64) *mPostMockRemove {
	if n == 0 {
		mmRemove.mock.t.Fatalf("Times of PostMock.Remove mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRemove.expectedInvocations, n)
	return mmRemove
}

func (mmRemove *mPostMockRemove) invocationsDone() bool {
	if len(mmRemove.expectations) == 0 && mmRemove.defaultExpectation == nil && mmRemove.mock.funcRemove == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRemove.mock.afterRemoveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRemove.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Remove implements repo.PostI
func (mmRemove *PostMock) Remove(postId int) (err error) {
	mm_atomic.AddUint64(&mmRemove.beforeRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmRemove.afterRemoveCounter, 1)

	if mmRemove.inspectFuncRemove != nil {
		mmRemove.inspectFuncRemove(postId)
	}

	mm_params := PostMockRemoveParams{postId}

	// Record call args
	mmRemove.RemoveMock.mutex.Lock()
	mmRemove.RemoveMock.callArgs = append(mmRemove.RemoveMock.callArgs, &mm_params)
	mmRemove.RemoveMock.mutex.Unlock()

	for _, e := range mmRemove.RemoveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRemove.RemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRemove.RemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmRemove.RemoveMock.defaultExpectation.params
		mm_want_ptrs := mmRemove.RemoveMock.defaultExpectation.paramPtrs

		mm_got := PostMockRemoveParams{postId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.postId != nil && !minimock.Equal(*mm_want_ptrs.postId, mm_got.postId) {
				mmRemove.t.Errorf("PostMock.Remove got unexpected parameter postId, want: %#v, got: %#v%s\n", *mm_want_ptrs.postId, mm_got.postId, minimock.Diff(*mm_want_ptrs.postId, mm_got.postId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRemove.t.Errorf("PostMock.Remove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRemove.RemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmRemove.t.Fatal("No results are set for the PostMock.Remove")
		}
		return (*mm_results).err
	}
	if mmRemove.funcRemove != nil {
		return mmRemove.funcRemove(postId)
	}
	mmRemove.t.Fatalf("Unexpected call to PostMock.Remove. %v", postId)
	return
}

// RemoveAfterCounter returns a count of finished PostMock.Remove invocations
func (mmRemove *PostMock) RemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemove.afterRemoveCounter)
}

// RemoveBeforeCounter returns a count of PostMock.Remove invocations
func (mmRemove *PostMock) RemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemove.beforeRemoveCounter)
}

// Calls returns a list of arguments used in each call to PostMock.Remove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRemove *mPostMockRemove) Calls() []*PostMockRemoveParams {
	mmRemove.mutex.RLock()

	argCopy := make([]*PostMockRemoveParams, len(mmRemove.callArgs))
	copy(argCopy, mmRemove.callArgs)

	mmRemove.mutex.RUnlock()

	return argCopy
}

// MinimockRemoveDone returns true if the count of the Remove invocations corresponds
// the number of defined expectations
func (m *PostMock) MinimockRemoveDone() bool {
	if m.RemoveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RemoveMock.invocationsDone()
}

// MinimockRemoveInspect logs each unmet expectation
func (m *PostMock) MinimockRemoveInspect() {
	for _, e := range m.RemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PostMock.Remove with params: %#v", *e.params)
		}
	}

	afterRemoveCounter := mm_atomic.LoadUint64(&m.afterRemoveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RemoveMock.defaultExpectation != nil && afterRemoveCounter < 1 {
		if m.RemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PostMock.Remove")
		} else {
			m.t.Errorf("Expected call to PostMock.Remove with params: %#v", *m.RemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRemove != nil && afterRemoveCounter < 1 {
		m.t.Error("Expected call to PostMock.Remove")
	}

	if !m.RemoveMock.invocationsDone() && afterRemoveCounter > 0 {
		m.t.Errorf("Expected %d calls to PostMock.Remove but found %d calls",
			mm_atomic.LoadUint64(&m.RemoveMock.expectedInvocations), afterRemoveCounter)
	}
}

type mPostMockUpdate struct {
	optional           bool
	mock               *PostMock
	defaultExpectation *PostMockUpdateExpectation
	expectations       []*PostMockUpdateExpectation

	callArgs []*PostMockUpdateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// PostMockUpdateExpectation specifies expectation struct of the PostI.Update
type PostMockUpdateExpectation struct {
	mock      *PostMock
	params    *PostMockUpdateParams
	paramPtrs *PostMockUpdateParamPtrs
	results   *PostMockUpdateResults
	Counter   uint64
}

// PostMockUpdateParams contains parameters of the PostI.Update
type PostMockUpdateParams struct {
	postId int
	header *string
	body   *string
}

// PostMockUpdateParamPtrs contains pointers to parameters of the PostI.Update
type PostMockUpdateParamPtrs struct {
	postId *int
	header **string
	body   **string
}

// PostMockUpdateResults contains results of the PostI.Update
type PostMockUpdateResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdate *mPostMockUpdate) Optional() *mPostMockUpdate {
	mmUpdate.optional = true
	return mmUpdate
}

// Expect sets up expected params for PostI.Update
func (mmUpdate *mPostMockUpdate) Expect(postId int, header *string, body *string) *mPostMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &PostMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.paramPtrs != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by ExpectParams functions")
	}

	mmUpdate.defaultExpectation.params = &PostMockUpdateParams{postId, header, body}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// ExpectPostIdParam1 sets up expected param postId for PostI.Update
func (mmUpdate *mPostMockUpdate) ExpectPostIdParam1(postId int) *mPostMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &PostMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &PostMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.postId = &postId

	return mmUpdate
}

// ExpectHeaderParam2 sets up expected param header for PostI.Update
func (mmUpdate *mPostMockUpdate) ExpectHeaderParam2(header *string) *mPostMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &PostMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &PostMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.header = &header

	return mmUpdate
}

// ExpectBodyParam3 sets up expected param body for PostI.Update
func (mmUpdate *mPostMockUpdate) ExpectBodyParam3(body *string) *mPostMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &PostMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &PostMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.body = &body

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the PostI.Update
func (mmUpdate *mPostMockUpdate) Inspect(f func(postId int, header *string, body *string)) *mPostMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for PostMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by PostI.Update
func (mmUpdate *mPostMockUpdate) Return(err error) *PostMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &PostMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &PostMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the PostI.Update method
func (mmUpdate *mPostMockUpdate) Set(f func(postId int, header *string, body *string) (err error)) *PostMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the PostI.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the PostI.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the PostI.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mPostMockUpdate) When(postId int, header *string, body *string) *PostMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("PostMock.Update mock is already set by Set")
	}

	expectation := &PostMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &PostMockUpdateParams{postId, header, body},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up PostI.Update return parameters for the expectation previously defined by the When method
func (e *PostMockUpdateExpectation) Then(err error) *PostMock {
	e.results = &PostMockUpdateResults{err}
	return e.mock
}

// Times sets number of times PostI.Update should be invoked
func (mmUpdate *mPostMockUpdate) Times(n uint64) *mPostMockUpdate {
	if n == 0 {
		mmUpdate.mock.t.Fatalf("Times of PostMock.Update mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdate.expectedInvocations, n)
	return mmUpdate
}

func (mmUpdate *mPostMockUpdate) invocationsDone() bool {
	if len(mmUpdate.expectations) == 0 && mmUpdate.defaultExpectation == nil && mmUpdate.mock.funcUpdate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdate.mock.afterUpdateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Update implements repo.PostI
func (mmUpdate *PostMock) Update(postId int, header *string, body *string) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(postId, header, body)
	}

	mm_params := PostMockUpdateParams{postId, header, body}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_want_ptrs := mmUpdate.UpdateMock.defaultExpectation.paramPtrs

		mm_got := PostMockUpdateParams{postId, header, body}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.postId != nil && !minimock.Equal(*mm_want_ptrs.postId, mm_got.postId) {
				mmUpdate.t.Errorf("PostMock.Update got unexpected parameter postId, want: %#v, got: %#v%s\n", *mm_want_ptrs.postId, mm_got.postId, minimock.Diff(*mm_want_ptrs.postId, mm_got.postId))
			}

			if mm_want_ptrs.header != nil && !minimock.Equal(*mm_want_ptrs.header, mm_got.header) {
				mmUpdate.t.Errorf("PostMock.Update got unexpected parameter header, want: %#v, got: %#v%s\n", *mm_want_ptrs.header, mm_got.header, minimock.Diff(*mm_want_ptrs.header, mm_got.header))
			}

			if mm_want_ptrs.body != nil && !minimock.Equal(*mm_want_ptrs.body, mm_got.body) {
				mmUpdate.t.Errorf("PostMock.Update got unexpected parameter body, want: %#v, got: %#v%s\n", *mm_want_ptrs.body, mm_got.body, minimock.Diff(*mm_want_ptrs.body, mm_got.body))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("PostMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the PostMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(postId, header, body)
	}
	mmUpdate.t.Fatalf("Unexpected call to PostMock.Update. %v %v %v", postId, header, body)
	return
}

// UpdateAfterCounter returns a count of finished PostMock.Update invocations
func (mmUpdate *PostMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of PostMock.Update invocations
func (mmUpdate *PostMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to PostMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mPostMockUpdate) Calls() []*PostMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*PostMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *PostMock) MinimockUpdateDone() bool {
	if m.UpdateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMock.invocationsDone()
}

// MinimockUpdateInspect logs each unmet expectation
func (m *PostMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PostMock.Update with params: %#v", *e.params)
		}
	}

	afterUpdateCounter := mm_atomic.LoadUint64(&m.afterUpdateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && afterUpdateCounter < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PostMock.Update")
		} else {
			m.t.Errorf("Expected call to PostMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && afterUpdateCounter < 1 {
		m.t.Error("Expected call to PostMock.Update")
	}

	if !m.UpdateMock.invocationsDone() && afterUpdateCounter > 0 {
		m.t.Errorf("Expected %d calls to PostMock.Update but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMock.expectedInvocations), afterUpdateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PostMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddInspect()

			m.MinimockGetPostInspect()

			m.MinimockGetPostsInspect()

			m.MinimockRemoveInspect()

			m.MinimockUpdateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PostMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PostMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddDone() &&
		m.MinimockGetPostDone() &&
		m.MinimockGetPostsDone() &&
		m.MinimockRemoveDone() &&
		m.MinimockUpdateDone()
}
