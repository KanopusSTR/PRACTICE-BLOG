DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS users;
DROP TYPE IF EXISTS comment CASCADE;
DROP TYPE IF EXISTS post CASCADE;
DROP TYPE IF EXISTS my_user CASCADE;


CREATE TABLE comments (
    	id          INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (MINVALUE  0 START WITH 0 INCREMENT BY 1),
	text        TEXT,
	date        TIMESTAMP,
	authorMail  TEXT,
	postId      INT
);
   
CREATE TABLE posts (
    	id         INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (MINVALUE  0 START WITH 0 INCREMENT BY 1),
	header     TEXT,
	body       TEXT,
	date       TIMESTAMP,
	authorMail TEXT
);
   
CREATE TABLE users (
    	name        TEXT,
	mail        TEXT PRIMARY KEY,
	password    BYTEA
);

CREATE TYPE comment AS (
	id          INT,
	text        TEXT,
	date        TIMESTAMP,
	authorMail  TEXT,
	postId      INT
);

CREATE TYPE post AS (
	id         INT,
	header     TEXT,
	body       TEXT,
	date       TIMESTAMP,
	authorMail TEXT
);

CREATE TYPE my_user AS (
	name        TEXT,
	mail        TEXT,
	password    BYTEA
);
   

-- comment functions

CREATE OR REPLACE FUNCTION create_comment(_text TEXT, _date TIMESTAMP, _authorMail TEXT, _postId INT)
    RETURNS VOID
    LANGUAGE SQL AS $$
    INSERT INTO comments (text, date, authorMail, postId)
    VALUES (_text, _date, _authorMail, _postId);
    $$
;

CREATE OR REPLACE FUNCTION read_comment(_id INT)
    RETURNS SETOF comment
    LANGUAGE SQL AS $$
    SELECT * FROM comments
             WHERE id = _id
             LIMIT 1;
    $$
;

CREATE OR REPLACE FUNCTION read_comments(_postId INT)
    RETURNS SETOF comment
    LANGUAGE SQL AS $$
    SELECT * FROM comments
             WHERE postId = _postId;
    $$
;

CREATE OR REPLACE FUNCTION update_comment(_id INT, _text TEXT)
    RETURNS VOID
    LANGUAGE SQL AS $$
    UPDATE comments
    SET text = _text
    WHERE id = _id;
    $$
;

CREATE OR REPLACE FUNCTION delete_comment(_id INT)
    RETURNS VOID
    LANGUAGE SQL AS $$
    DELETE FROM comments
           WHERE id = _id;
    $$
;

-- post functions

CREATE OR REPLACE FUNCTION create_post(_header TEXT, _body TEXT, _date TIMESTAMP, _authorMail TEXT)
    RETURNS VOID
    LANGUAGE SQL AS $$
    INSERT INTO posts (header, body, date, authorMail)
    VALUES (_header, _body, _date, _authorMail);
    $$
;

CREATE OR REPLACE FUNCTION read_post(_id INT)
    RETURNS SETOF post
    LANGUAGE SQL AS $$
    SELECT * FROM posts
             WHERE id = _id
             LIMIT 1;
    $$
;

CREATE OR REPLACE FUNCTION read_posts()
    RETURNS SETOF post
    LANGUAGE SQL AS $$
    SELECT * FROM posts;
    $$
;

CREATE OR REPLACE FUNCTION update_post(_id INT, _header TEXT, _body TEXT)
    RETURNS VOID
    LANGUAGE SQL AS $$
    UPDATE posts
    SET header = _header,
        body = _body
    WHERE id = _id;
    $$
;

CREATE OR REPLACE FUNCTION delete_post(_id INT)
    RETURNS VOID
    LANGUAGE SQL AS $$
    DELETE FROM posts
           WHERE id = _id;
    $$
;

-- user functions

CREATE OR REPLACE FUNCTION create_user(_name TEXT, _mail TEXT, _password BYTEA)
    RETURNS VOID
    LANGUAGE SQL AS $$
    INSERT INTO users (name, mail, password)
    VALUES (_name, _mail, _password);
    $$
;

CREATE OR REPLACE FUNCTION read_user(_mail TEXT)
    RETURNS SETOF my_user
    LANGUAGE SQL AS $$
    SELECT * FROM users
             WHERE mail = _mail
             LIMIT 1;
    $$
;

CREATE OR REPLACE FUNCTION read_users()
    RETURNS SETOF my_user
    LANGUAGE SQL AS $$
    SELECT * FROM users;
    $$
;

CREATE OR REPLACE FUNCTION update_user_name(_name TEXT, _mail TEXT)
    RETURNS VOID
    LANGUAGE SQL AS $$
    UPDATE users
    SET name = _name
    WHERE mail = _mail;
    $$
;

CREATE OR REPLACE FUNCTION update_user_password(_mail TEXT, _password BYTEA)
    RETURNS VOID
    LANGUAGE SQL AS $$
    UPDATE users
    SET password = _password
    WHERE mail = _mail;
    $$
;

CREATE OR REPLACE FUNCTION delete_user(_mail TEXT)
    RETURNS VOID
    LANGUAGE SQL AS $$
    DELETE FROM users
           WHERE mail = _mail;
    $$
;

